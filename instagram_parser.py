# instagram_parser.py
import os
import re
import time
import pandas as pd
from googlesearch import search
from typing import Optional, Set
from pathlib import Path
from logger import setup_logger

logger = setup_logger()

class InstagramParser:
    def __init__(self, data_dir: str = "/Users/ivan/Desktop/EatSpot_Bot_git/data"):
        self.data_dir = Path(data_dir)
        self.blacklist_file = self.data_dir / "instagram_blacklist.txt"
        self.city_default = "–ú–æ—Å–∫–≤–∞"
        self.sleep_between_queries = 2  # —Å–µ–∫—É–Ω–¥
        
        # –ë–∞–∑–æ–≤—ã–π —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        self.base_blacklist = {"13 –ì—Ä–∞–¥—É—Å–æ–≤", "–¶–∏—Ä–∫", "The Waterfront", "–°—Ç–∞—è"}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        self.blacklist = self.load_blacklist()
    
    def normalize_name(self, name: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not isinstance(name, str):
            name = "" if pd.isna(name) else str(name)
        s = name.strip().lower()
        s = s.replace("—ë", "–µ")
        # —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏/–¥–µ—Ñ–∏—Å—ã/–º–Ω–æ–≥–æ–ø—Ä–æ–±–µ–ª—å–µ
        s = s.replace("'", "'").replace("'", "'").replace(""", '"').replace(""", '"')
        s = re.sub(r"[-‚Äì‚Äî]+", "-", s)
        s = re.sub(r"\s+", " ", s)
        return s
    
    def load_blacklist(self) -> Set[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        names = set()
        if self.blacklist_file.exists():
            with open(self.blacklist_file, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if line:
                        names.add(line)
        # –¥–æ–±–∞–≤–∏–º –±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        names |= self.base_blacklist
        return names
    
    def save_blacklist(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª"""
        with open(self.blacklist_file, "w", encoding="utf-8") as f:
            for n in sorted(self.blacklist, key=lambda x: self.normalize_name(x)):
                f.write(n + "\n")
    
    def is_in_blacklist(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        norm = self.normalize_name(name)
        norm_set = {self.normalize_name(x) for x in self.blacklist}
        return norm in norm_set
    
    def add_to_blacklist(self, name: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        if not self.is_in_blacklist(name):
            self.blacklist.add(name)
            return True
        return False
    
    def find_instagram(self, name: str, city: str = None) -> Optional[str]:
        """–ò—â–µ—Ç Instagram –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
        if city is None:
            city = self.city_default
            
        query = f"site:instagram.com {name} {city}"
        
        try:
            for result in search(query, num_results=5, lang="ru"):
                if "instagram.com" in result:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω Instagram –¥–ª—è {name}: {result}")
                    return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Instagram –¥–ª—è {name}: {e}")
        
        return None
    
    def process_place(self, place_name: str) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –º–µ—Å—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Instagram —Å—Å—ã–ª–∫—É"""
        if not place_name or pd.isna(place_name):
            return None
            
        name = str(place_name).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if self.is_in_blacklist(name):
            logger.info(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ): {name}")
            return None
        
        # –ò—â–µ–º Instagram
        insta_link = self.find_instagram(name)
        
        if insta_link:
            return insta_link
        else:
            logger.info(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Instagram –¥–ª—è {name} ‚Äî –¥–æ–±–∞–≤–ª—è—é –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
            if self.add_to_blacklist(name):
                self.save_blacklist()
            return None
    
    def batch_process_places(self, places_data: list, max_count: int = 10) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        results = {}
        processed = 0
        
        for place in places_data:
            if processed >= max_count:
                break
                
            name = place.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')
            if not name or pd.isna(name):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Instagram
            if place.get('instagram') and str(place.get('instagram')).strip():
                continue
            
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {name}")
            insta_link = self.process_place(name)
            
            if insta_link:
                results[name] = insta_link
                processed += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(self.sleep_between_queries)
        
        return results
    
    def get_blacklist_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        return {
            'total_count': len(self.blacklist),
            'base_count': len(self.base_blacklist),
            'custom_count': len(self.blacklist) - len(self.base_blacklist),
            'file_path': str(self.blacklist_file)
        }
