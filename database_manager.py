# database_manager.py
import pandas as pd
from sqlalchemy import create_engine, text, inspect
from typing import Dict, Optional, Tuple, List
from config import POSTGRES_URL, EXCEL_PATH
from logger import log_excel_update
import logging
from pathlib import Path

logger = logging.getLogger('ParserBot')

class DatabaseManager:
    def __init__(self):
        self.engine = create_engine(POSTGRES_URL)
        self._ensure_table_exists()
        
        # –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É Excel —Ñ–∞–π–ª—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        self.local_excel_path = Path("/Users/ivan/Desktop/EatSpot_Bot_git/data/places.xlsx")
    
    def _ensure_table_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã places"""
        try:
            inspector = inspect(self.engine)
            if 'places' not in inspector.get_table_names():
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ places –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            else:
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ places —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def update_place_data(self, url: str, data: Dict) -> Tuple[bool, str]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ PostgreSQL
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –°—Å—ã–ª–∫–∞ –≤–º–µ—Å—Ç–æ id)
            check_sql = text("SELECT \"–°—Å—ã–ª–∫–∞\" FROM places WHERE \"–°—Å—ã–ª–∫–∞\" = :url")
            
            with self.engine.connect() as conn:
                result = conn.execute(check_sql, {"url": url})
                existing_record = result.fetchone()
                
                if existing_record:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    update_sql = text("""
                        UPDATE places SET 
                            "–ù–∞–∑–≤–∞–Ω–∏–µ" = :title,
                            "–†–µ–π—Ç–∏–Ω–≥" = :rating,
                            "–û—Ç–∑—ã–≤—ã" = :reviews,
                            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" = :categories,
                            "–®–∏—Ä–æ—Ç–∞" = :latitude,
                            "–î–æ–ª–≥–æ—Ç–∞" = :longitude,
                            "–ü–Ω" = :monday,
                            "–í—Ç" = :tuesday,
                            "–°—Ä" = :wednesday,
                            "–ß—Ç" = :thursday,
                            "–ü—Ç" = :friday,
                            "–°–±" = :saturday,
                            "–í—Å" = :sunday
                        WHERE "–°—Å—ã–ª–∫–∞" = :url
                    """)
                    action = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                    log_excel_update(url, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    insert_sql = text("""
                        INSERT INTO places (
                            "–°—Å—ã–ª–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–†–µ–π—Ç–∏–Ω–≥", "–û—Ç–∑—ã–≤—ã", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                            "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"
                        ) VALUES (
                            :url, :title, :rating, :reviews, :categories,
                            :latitude, :longitude, :monday, :tuesday, :wednesday,
                            :thursday, :friday, :saturday, :sunday
                        )
                    """)
                    action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"
                    log_excel_update(url, "—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                coordinates = data.get('coordinates')
                latitude = longitude = None
                if coordinates and len(coordinates) == 2:
                    latitude, longitude = coordinates
                
                hours = data.get('hours', {})
                
                params = {
                    "url": url,
                    "title": data.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
                    "rating": data.get('rating', '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω'),
                    "reviews": data.get('reviews', '–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'),
                    "categories": data.get('categories'),
                    "latitude": latitude,
                    "longitude": longitude,
                    "monday": hours.get('–ü–Ω'),
                    "tuesday": hours.get('–í—Ç'),
                    "wednesday": hours.get('–°—Ä'),
                    "thursday": hours.get('–ß—Ç'),
                    "friday": hours.get('–ü—Ç'),
                    "saturday": hours.get('–°–±'),
                    "sunday": hours.get('–í—Å')
                }
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                if existing_record:
                    conn.execute(update_sql, params)
                else:
                    conn.execute(insert_sql, params)
                
                conn.commit()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º
            self._sync_with_local_excel()
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel –¥–ª—è –±—ç–∫–∞–ø–∞
            self._backup_to_excel(url, data)
            
            return True, f"‚úÖ –ó–∞–ø–∏—Å—å {action} –≤ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel"
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PostgreSQL: {e}"
            logger.error(error_msg)
            return False, error_msg
    
    def update_instagram_for_place(self, place_name: str, instagram_url: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Instagram —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
        try:
            update_sql = text("""
                UPDATE places SET "instagram" = :instagram_url
                WHERE "–ù–∞–∑–≤–∞–Ω–∏–µ" = :place_name
            """)
            
            with self.engine.connect() as conn:
                result = conn.execute(update_sql, {
                    "instagram_url": instagram_url,
                    "place_name": place_name
                })
                conn.commit()
                
                if result.rowcount > 0:
                    logger.info(f"‚úÖ Instagram –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {place_name}: {instagram_url}")
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel
                    self._sync_with_local_excel()
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {place_name}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Instagram –¥–ª—è {place_name}: {e}")
            return False
    
    def get_places_without_instagram(self, limit: int = 50) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—Ç–∞ –±–µ–∑ Instagram"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(text("""
                    SELECT * FROM places 
                    WHERE "instagram" IS NULL OR "instagram" = '' OR "instagram" = 'nan'
                    ORDER BY "–ù–∞–∑–≤–∞–Ω–∏–µ"
                    LIMIT :limit
                """), {"limit": limit})
                return [dict(row._mapping) for row in result.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç –±–µ–∑ Instagram: {e}")
            return []
    
    def get_instagram_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ Instagram"""
        try:
            with self.engine.connect() as conn:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
                total_result = conn.execute(text("SELECT COUNT(*) FROM places"))
                total_count = total_result.scalar()
                
                # –ú–µ—Å—Ç–∞ —Å Instagram
                with_insta_result = conn.execute(text("""
                    SELECT COUNT(*) FROM places 
                    WHERE "instagram" IS NOT NULL AND "instagram" != '' AND "instagram" != 'nan'
                """))
                with_instagram = with_insta_result.scalar()
                
                # –ú–µ—Å—Ç–∞ –±–µ–∑ Instagram
                without_instagram = total_count - with_instagram
                
                return {
                    'total_places': total_count,
                    'with_instagram': with_instagram,
                    'without_instagram': without_instagram,
                    'percentage': round((with_instagram / total_count * 100) if total_count > 0 else 0, 1)
                }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Instagram: {e}")
            return {}
    
    def _sync_with_local_excel(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL
            all_places = self.get_all_places()
            
            if not all_places:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Excel")
                return
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(all_places)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if self.local_excel_path.exists():
                logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel: {self.local_excel_path}")
            else:
                logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞: {self.local_excel_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª
            df.to_excel(self.local_excel_path, index=False)
            logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {len(all_places)} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel: {e}")
    
    def _backup_to_excel(self, url: str, data: Dict):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ Excel —Ñ–∞–π–ª–µ"""
        try:
            import pandas as pd
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Excel –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if EXCEL_PATH.exists():
                df = pd.read_excel(EXCEL_PATH)
            else:
                columns = [
                    '–°—Å—ã–ª–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–†–µ–π—Ç–∏–Ω–≥', '–û—Ç–∑—ã–≤—ã', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
                    '–®–∏—Ä–æ—Ç–∞', '–î–æ–ª–≥–æ—Ç–∞', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'
                ]
                df = pd.DataFrame(columns=columns)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if url in df['–°—Å—ã–ª–∫–∞'].values:
                row_idx = df[df['–°—Å—ã–ª–∫–∞'] == url].index[0]
            else:
                row_idx = len(df)
                df.loc[row_idx] = [None] * len(df.columns)
                df.at[row_idx, '–°—Å—ã–ª–∫–∞'] = url
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            df.at[row_idx, '–ù–∞–∑–≤–∞–Ω–∏–µ'] = data.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            df.at[row_idx, '–†–µ–π—Ç–∏–Ω–≥'] = data.get('rating', '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            df.at[row_idx, '–û—Ç–∑—ã–≤—ã'] = data.get('reviews', '–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
            df.at[row_idx, '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'] = data.get('categories')
            
            coordinates = data.get('coordinates')
            if coordinates and len(coordinates) == 2:
                latitude, longitude = coordinates
                df.at[row_idx, '–®–∏—Ä–æ—Ç–∞'] = latitude
                df.at[row_idx, '–î–æ–ª–≥–æ—Ç–∞'] = longitude
            
            hours = data.get('hours', {})
            for day, time_range in hours.items():
                if day in df.columns:
                    df.at[row_idx, day] = time_range
            
            df.to_excel(EXCEL_PATH, index=False)
            logger.info(f"üìä –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Excel: {url}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –±—ç–∫–∞–ø–∞: {e}")
    
    def get_places_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(text("SELECT COUNT(*) FROM places"))
                return result.scalar()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
            return 0
    
    def get_place_by_url(self, url: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ URL"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(
                    text("SELECT * FROM places WHERE \"–°—Å—ã–ª–∫–∞\" = :url"),
                    {"url": url}
                )
                row = result.fetchone()
                if row:
                    return dict(row._mapping)
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            return None
    
    def get_all_places(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –º–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(text("SELECT * FROM places ORDER BY \"–°—Å—ã–ª–∫–∞\""))
                return [dict(row._mapping) for row in result.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            return []
    
    def get_recent_places(self, limit: int = 10) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–ø–æ –°—Å—ã–ª–∫–µ)"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(
                    text("SELECT * FROM places ORDER BY \"–°—Å—ã–ª–∫–∞\" DESC LIMIT :limit"),
                    {"limit": limit}
                )
                return [dict(row._mapping) for row in result.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            return []
    
    def force_sync_excel(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º"""
        try:
            self._sync_with_local_excel()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False
