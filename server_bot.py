# server_bot.py
import re
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN, ADMIN_IDS
from database_manager import DatabaseManager
from yandex_parser import parse_yandex
from admin_commands import admin_stats, admin_export, admin_backup, admin_help, admin_sync, admin_instagram_search, admin_instagram_stats, is_admin
from logger import setup_logger, log_parsing_result, log_admin_action

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()
db_manager = DatabaseManager()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
YANDEX_URL_PATTERN = re.compile(r"(https?://yandex\.(?:ru|com)/maps/org/[^\s]+)")

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not text:
        return text
    
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç üìç\n\n"
        "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö\n"
        "2. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "3. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "4. –ò —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º\n\n"
        "**–ß—Ç–æ —è —Å–æ–±–∏—Ä–∞—é:**\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã\n"
        "‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞/–¥–æ–ª–≥–æ—Ç–∞)\n"
        "‚Ä¢ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n\n"
        "**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:**\n"
        "–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ EatSpot_Bot_git\n"
        "–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ"
    )
    
    if is_admin(user_id):
        welcome_message += "\n\nüîß –î–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help"
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.strip()
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text[:50]}...")
    
    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
    match = YANDEX_URL_PATTERN.search(text)
    
    if match:
        url = match.group(1)
        await update.message.reply_text(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É: {url}")
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            data = parse_yandex(url)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success, message = db_manager.update_place_data(url, data)
            

            
            if success:
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                log_parsing_result(url, True, data)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                hours_text = ""
                hours = data.get("hours", {})
                if hours:
                    hours_lines = []
                    for day, time_range in hours.items():
                        escaped_day = escape_markdown(day)
                        escaped_time = escape_markdown(str(time_range))
                        hours_lines.append(f"  {escaped_day}: {escaped_time}")
                    hours_text = "\n".join(hours_lines)
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                title = escape_markdown(data.get('title', 'N/A'))
                rating = escape_markdown(data.get('rating', 'N/A'))
                reviews = escape_markdown(data.get('reviews', 'N/A'))
                coordinates = escape_markdown(str(data.get('coordinates', 'N/A')))
                categories = escape_markdown(data.get('categories', 'N/A'))
                escaped_message = escape_markdown(message)
                

                
                response = (
                    f"‚úÖ **–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!**\n\n"
                    f"üè∑ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
                    f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating}\n"
                    f"üí¨ **–û—Ç–∑—ã–≤—ã:** {reviews}\n"
                    f"üìç **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:** {coordinates}\n"
                    f"üè™ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:** {categories}\n\n"
                    f"üïê **–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:**\n{hours_text or '‚Äî'}\n\n"
                    f"üìä {escaped_message}\n\n"
                    f"üîÑ –î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞!\n"
                    f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω"
                )
                
                await update.message.reply_text(response, parse_mode='Markdown')
                
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                log_parsing_result(url, False, error=message)
                await update.message.reply_text(f"‚ùå {escape_markdown(message)}")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}"
            log_parsing_result(url, False, error=error_msg)
            await update.message.reply_text(f"‚ùå {escape_markdown(error_msg)}")
            
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
        help_text = (
            "üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã**\n\n"
            "–ü—Ä–∏–º–µ—Ä: `https://yandex\\.ru/maps/org/\\.\\.\\.`\n\n"
            "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—é –≤ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º EatSpot_Bot_git, –∞ —Ç–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º."
        )
        
        if is_admin(user_id):
            help_text += "\n\nüîß –ê–¥–º–∏–Ω\\-–∫–æ–º–∞–Ω–¥—ã: /help"
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    
    try:
        places_count = db_manager.get_places_count()
        recent_places = db_manager.get_recent_places(3)
        local_excel_exists = db_manager.local_excel_path.exists()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Instagram
        instagram_stats = db_manager.get_instagram_stats()
        instagram_info = ""
        if instagram_stats:
            instagram_info = (
                f"\nüì∏ Instagram: {instagram_stats.get('with_instagram', 0)}/{instagram_stats.get('total_places', 0)} "
                f"\\({instagram_stats.get('percentage', 0)}%\\)"
            )
        
        status_message = (
            f"ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
            f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            f"üìç –ú–µ—Å—Ç –≤ –±–∞–∑–µ: {places_count}\n"
            f"üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL\n"
            f"üìä –õ–æ–∫–∞–ª—å–Ω—ã–π Excel: {'‚úÖ' if local_excel_exists else '‚ùå'}\n"
            f"üÜî –í–∞—à ID: `{user_id}`"
        )
        
        if recent_places:
            status_message += "\n\nüìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:**\n"
            for place in recent_places:
                name = escape_markdown(place.get('–ù–∞–∑–≤–∞–Ω–∏–µ', 'N/A')[:30])
                status_message += f"‚Ä¢ {name}\n"
        
        if is_admin(user_id):
            status_message += "\n\nüîß –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        
        await update.message.reply_text(status_message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {escape_markdown(str(e))}")

async def recent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞"""
    try:
        recent_places = db_manager.get_recent_places(10)
        
        if not recent_places:
            await update.message.reply_text("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
        
        message = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:**\n\n"
        
        for i, place in enumerate(recent_places, 1):
            name = escape_markdown(place.get('–ù–∞–∑–≤–∞–Ω–∏–µ', 'N/A'))
            rating = escape_markdown(place.get('–†–µ–π—Ç–∏–Ω–≥', 'N/A'))
            categories = escape_markdown(place.get('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'N/A'))
            
            message += (
                f"{i}\\. **{name}**\n"
                f"   ‚≠ê {rating} \\| üè™ {categories}\n\n"
            )
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {escape_markdown(str(e))}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è PostgreSQL...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    logger.info(f"üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("recent", recent))
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("stats", admin_stats))
    app.add_handler(CommandHandler("sync", admin_sync))
    app.add_handler(CommandHandler("export", admin_export))
    app.add_handler(CommandHandler("backup", admin_backup))
    app.add_handler(CommandHandler("help", admin_help))
    
    # Instagram –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("instagram_search", admin_instagram_search))
    app.add_handler(CommandHandler("instagram_stats", admin_instagram_stats))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info(f"üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
    logger.info("üóÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: 109.69.56.200:5432/places")
    logger.info(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π Excel: {db_manager.local_excel_path}")

    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
