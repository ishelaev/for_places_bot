import re
from telegram import Update
from telegram.ext import ContextTypes
from yandex_parser import parse_yandex

YANDEX_URL_PATTERN = re.compile(r"(https?://yandex\.ru/maps/org/[^\s]+)")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    match = YANDEX_URL_PATTERN.search(text)
    if match:
        url = match.group(1)
        await update.message.reply_text(f"–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ —Å {url}...")

        try:
            info = parse_yandex(url)
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            hours_text = "\n".join(f"  {day}: {hours}" for day, hours in info.get("hours", {}).items())
            response = (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('title')}\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {info.get('rating')}\n"
                f"–û—Ç–∑—ã–≤—ã: {info.get('reviews')}\n"
                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {info.get('coordinates')}\n"
                f"–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:\n{hours_text or '‚Äî'}"
            )
            await update.message.reply_text(response)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
    else:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö üìç")
