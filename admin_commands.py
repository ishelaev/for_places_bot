# admin_commands.py
from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_IDS
from database_manager import DatabaseManager
from instagram_parser import InstagramParser
from logger import log_admin_action, setup_logger
import pandas as pd

logger = setup_logger()
db_manager = DatabaseManager()
instagram_parser = InstagramParser()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = update.effective_user.id
    log_admin_action(user_id, "–∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    try:
        places_count = db_manager.get_places_count()
        all_places = db_manager.get_all_places()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_stats = ""
        categories = [place.get('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏') for place in all_places if place.get('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')]
        if categories:
            from collections import Counter
            category_counts = Counter(categories).most_common(5)
            categories_stats = "\nüìä –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"
            for category, count in category_counts:
                categories_stats += f"  ‚Ä¢ {category}: {count}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
        rating_stats = ""
        ratings = [place.get('–†–µ–π—Ç–∏–Ω–≥') for place in all_places if place.get('–†–µ–π—Ç–∏–Ω–≥')]
        if ratings:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
                numeric_ratings = []
                for rating in ratings:
                    if isinstance(rating, str) and rating.replace('.', '').isdigit():
                        numeric_ratings.append(float(rating))
                
                if numeric_ratings:
                    avg_rating = sum(numeric_ratings) / len(numeric_ratings)
                    rating_stats = f"\n‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}"
            except:
                pass
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Instagram
        instagram_stats = db_manager.get_instagram_stats()
        instagram_info = ""
        if instagram_stats:
            instagram_info = (
                f"\nüì∏ **Instagram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"  ‚Ä¢ –í—Å–µ–≥–æ –º–µ—Å—Ç: {instagram_stats.get('total_places', 0)}\n"
                f"  ‚Ä¢ –° Instagram: {instagram_stats.get('with_instagram', 0)}\n"
                f"  ‚Ä¢ –ë–µ–∑ Instagram: {instagram_stats.get('without_instagram', 0)}\n"
                f"  ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ: {instagram_stats.get('percentage', 0)}%"
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –º–µ—Å—Ç–∞–º
        recent_places = db_manager.get_recent_places(5)
        recent_stats = ""
        if recent_places:
            recent_stats = "\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n"
            for place in recent_places:
                name = place.get('–ù–∞–∑–≤–∞–Ω–∏–µ', 'N/A')[:25]
                url = place.get('–°—Å—ã–ª–∫–∞', 'N/A')[:30]
                recent_stats += f"  ‚Ä¢ {name}\n    {url}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        local_excel_exists = db_manager.local_excel_path.exists()
        sync_status = "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω" if local_excel_exists else "‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ Instagram
        blacklist_stats = instagram_parser.get_blacklist_stats()
        blacklist_info = (
            f"\nüö´ **Instagram —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:**\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ: {blacklist_stats.get('total_count', 0)}\n"
            f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã—Ö: {blacklist_stats.get('base_count', 0)}\n"
            f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {blacklist_stats.get('custom_count', 0)}"
        )
        
        stats_message = (
            f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"üìç –í—Å–µ–≥–æ –º–µ—Å—Ç: {places_count}\n"
            f"üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL\n"
            f"üåê –°–µ—Ä–≤–µ—Ä: 109.69.56.200:5432/places\n"
            f"üìä –õ–æ–∫–∞–ª—å–Ω—ã–π Excel: {sync_status}\n"
            f"üìÅ –ü—É—Ç—å: `{db_manager.local_excel_path}`\n"
            f"{rating_stats}"
            f"{categories_stats}"
            f"{instagram_info}"
            f"{blacklist_info}"
            f"{recent_stats}"
        )
        
        await update.message.reply_text(stats_message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def admin_instagram_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ Instagram –¥–ª—è –º–µ—Å—Ç –±–µ–∑ Instagram"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = update.effective_user.id
    log_admin_action(user_id, "–∑–∞–ø—É—Å—Ç–∏–ª –ø–æ–∏—Å–∫ Instagram")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –±–µ–∑ Instagram
        places_without_instagram = db_manager.get_places_without_instagram(limit=10)
        
        if not places_without_instagram:
            await update.message.reply_text("‚úÖ –í—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∏–º–µ—é—Ç Instagram!")
            return
        
        await update.message.reply_text(
            f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ Instagram –¥–ª—è {len(places_without_instagram)} –º–µ—Å—Ç...\n"
            f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        results = instagram_parser.batch_process_places(places_without_instagram, max_count=10)
        
        if results:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            updated_count = 0
            for place_name, instagram_url in results.items():
                if db_manager.update_instagram_for_place(place_name, instagram_url):
                    updated_count += 1
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–∏—Å–∫ Instagram –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Å—Ç: {len(places_without_instagram)}\n"
                f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ Instagram: {len(results)}\n"
                f"  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑–µ: {updated_count}\n\n"
                f"üì∏ –ù–∞–π–¥–µ–Ω–Ω—ã–µ Instagram:\n" +
                "\n".join([f"  ‚Ä¢ {name}: {url}" for name, url in results.items()])
            )
        else:
            await update.message.reply_text(
                "‚ùå Instagram –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫."
            )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Instagram: {e}")

async def admin_instagram_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ Instagram"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = update.effective_user.id
    log_admin_action(user_id, "–∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Instagram")
    
    try:
        instagram_stats = db_manager.get_instagram_stats()
        blacklist_stats = instagram_parser.get_blacklist_stats()
        
        if not instagram_stats:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Instagram")
            return
        
        stats_message = (
            f"üì∏ **Instagram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"üìç –í—Å–µ–≥–æ –º–µ—Å—Ç: {instagram_stats.get('total_places', 0)}\n"
            f"‚úÖ –° Instagram: {instagram_stats.get('with_instagram', 0)}\n"
            f"‚ùå –ë–µ–∑ Instagram: {instagram_stats.get('without_instagram', 0)}\n"
            f"üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: {instagram_stats.get('percentage', 0)}%\n\n"
            f"üö´ **–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:**\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {blacklist_stats.get('total_count', 0)}\n"
            f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã—Ö: {blacklist_stats.get('base_count', 0)}\n"
            f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {blacklist_stats.get('custom_count', 0)}\n"
            f"  ‚Ä¢ –§–∞–π–ª: `{blacklist_stats.get('file_path', 'N/A')}`"
        )
        
        await update.message.reply_text(stats_message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Instagram: {e}")

async def admin_sync(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = update.effective_user.id
    log_admin_action(user_id, "–∑–∞–ø—Ä–æ—Å–∏–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Excel")
    
    try:
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º...")
        
        success = db_manager.force_sync_excel()
        
        if success:
            places_count = db_manager.get_places_count()
            await update.message.reply_text(
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üìä –ó–∞–ø–∏—Å–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {places_count}\n"
                f"üìÅ –§–∞–π–ª: `{db_manager.local_excel_path}`",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

async def admin_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = update.effective_user.id
    log_admin_action(user_id, "–∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        all_places = db_manager.get_all_places()
        if not all_places:
            await update.message.reply_text("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(all_places)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª
        csv_path = db_manager.excel_path.parent / "places_export.csv"
        df.to_csv(csv_path, index=False, encoding='utf-8')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(csv_path, 'rb') as file:
            await update.message.reply_document(
                document=file,
                filename="places_export.csv",
                caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        csv_path.unlink()
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

async def admin_backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = update.effective_user.id
    log_admin_action(user_id, "—Å–æ–∑–¥–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    
    try:
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è –±—ç–∫–∞–ø–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = db_manager.excel_path.parent / f"places_backup_{timestamp}.xlsx"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_places = db_manager.get_all_places()
        if all_places:
            df = pd.DataFrame(all_places)
            df.to_excel(backup_path, index=False)
            
            await update.message.reply_text(
                f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:\n`{backup_path.name}`\n"
                f"üìä –ó–∞–ø–∏—Å–µ–π: {len(all_places)}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –±—ç–∫–∞–ø –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")

async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    help_text = (
        "üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "/sync - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV\n"
        "/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üì∏ **Instagram –∫–æ–º–∞–Ω–¥—ã**\n"
        "/instagram_search - –ü–æ–∏—Å–∫ Instagram –¥–ª—è –º–µ—Å—Ç –±–µ–∑ Instagram\n"
        "/instagram_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Instagram\n\n"
        "üìù **–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/recent - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n\n"
        "üóÑ **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å EatSpot_Bot_git**\n"
        "–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ PostgreSQL\n"
        "–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º"
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')
