#!/usr/bin/env python3
"""
Backup Manager - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
from pathlib import Path
from datetime import datetime
import json
import os

class BackupManager:
    def __init__(self, backup_dir: str = "backups"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        self.backup_dir = Path(backup_dir)
        self.backup_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
        (self.backup_dir / "excel").mkdir(exist_ok=True)
        (self.backup_dir / "json").mkdir(exist_ok=True)
        (self.backup_dir / "csv").mkdir(exist_ok=True)
    
    def create_excel_backup(self, data: list, filename: str = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            if not data:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return None
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"places_backup_{timestamp}.xlsx"
            
            filepath = self.backup_dir / "excel" / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            df.to_excel(filepath, index=False)
            print(f"‚úÖ Excel —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {filepath}")
            return str(filepath)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def create_json_backup(self, data: list, filename: str = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            if not data:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"places_backup_{timestamp}.json"
            
            filepath = self.backup_dir / "json" / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ JSON —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {filepath}")
            return str(filepath)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def create_csv_backup(self, data: list, filename: str = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            if not data:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return None
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"places_backup_{timestamp}.csv"
            
            filepath = self.backup_dir / "csv" / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            df.to_csv(filepath, index=False, encoding='utf-8')
            print(f"‚úÖ CSV —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {filepath}")
            
            return str(filepath)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def create_full_backup(self, data: list) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        results = {
            'timestamp': timestamp,
            'excel': None,
            'json': None,
            'csv': None
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        results['excel'] = self.create_excel_backup(data, f"places_backup_{timestamp}.xlsx")
        results['json'] = self.create_json_backup(data, f"places_backup_{timestamp}.json")
        results['csv'] = self.create_csv_backup(data, f"places_backup_{timestamp}.csv")
        
        print(f"üîÑ –ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {timestamp}")
        return results
    
    def cleanup_old_backups(self, keep_days: int = 30):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
        try:
            cutoff_date = datetime.now().timestamp() - (keep_days * 24 * 60 * 60)
            
            for format_dir in ['excel', 'json', 'csv']:
                format_path = self.backup_dir / format_dir
                if format_path.exists():
                    for file in format_path.iterdir():
                        if file.is_file():
                            if file.stat().st_mtime < cutoff_date:
                                file.unlink()
                                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file}")
            
            print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {keep_days} –¥–Ω–µ–π)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
    
    def get_backup_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        stats = {
            'total_files': 0,
            'excel_files': 0,
            'json_files': 0,
            'csv_files': 0,
            'total_size_mb': 0
        }
        
        try:
            for format_dir in ['excel', 'json', 'csv']:
                format_path = self.backup_dir / format_dir
                if format_path.exists():
                    files = list(format_path.iterdir())
                    stats[f'{format_dir}_files'] = len(files)
                    stats['total_files'] += len(files)
                    
                    for file in files:
                        if file.is_file():
                            stats['total_size_mb'] += file.stat().st_size / (1024 * 1024)
            
            stats['total_size_mb'] = round(stats['total_size_mb'], 2)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return stats

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    backup_manager = BackupManager()
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    sample_data = [
        {
            '–°—Å—ã–ª–∫–∞': 'https://example.com',
            '–ù–∞–∑–≤–∞–Ω–∏–µ': '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ',
            '–†–µ–π—Ç–∏–Ω–≥': '4.5',
            '–û—Ç–∑—ã–≤—ã': '100 –æ—Ç–∑—ã–≤–æ–≤'
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_manager.create_full_backup(sample_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = backup_manager.get_backup_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {stats}")
